import os
from fpdf import FPDF
import matplotlib.pyplot as plt

class PDF(FPDF):
    def header(self):
        # School Name
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Bharat School", 0, 1, "C")
        self.ln(10)

    def chapter_title(self, title):
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, title, 0, 1, "L")
        self.ln(5)

    def chapter_body(self, body):
        self.set_font("Arial", "", 12)
        self.multi_cell(0, 10, body)
        self.ln()

def get_grade(score):
    """Returns the grade based on the score."""
    if score >= 90:
        return 'A'
    elif score >= 80:
        return 'B'
    elif score >= 70:
        return 'C'
    elif score >= 60:
        return 'D'
    else:
        return 'F'

def create_bar_graph(subjects, student_scores, top_scores, average_scores):
    """Creates a bar graph comparing student scores, top scores, and average scores."""
    bar_width = 0.2
    
    r1 = range(len(subjects))
    r2 = [x + bar_width for x in r1]
    r3 = [x + bar_width * 2 for x in r1]

    plt.figure(figsize=(10, 6))

    plt.bar(r1, student_scores, color='blue', width=bar_width, label='Student Score')
    plt.bar(r2, top_scores, color='red', width=bar_width, label='Top Score')
    plt.bar(r3, average_scores, color='green', width=bar_width, label='Avg Score')

    plt.xlabel('Subjects')
    plt.ylabel('Scores')
    plt.title('Student vs Top vs Avg Scores')
    plt.xticks([r + bar_width for r in range(len(subjects))], subjects)

    plt.legend()
    plt.tight_layout()

    # Save the graph as an image
    plt.savefig("bar_graph.png")
    plt.close()

def generate_report_card(student_name, teacher_name, parent_contact, teacher_contact,
                         class_name, exam_name, scores, top_scores, average_scores):
    # Create the 'Grades' directory if it doesn't exist
    directory = "Grades"
    if not os.path.exists(directory):
        os.makedirs(directory)

    pdf = PDF()
    pdf.add_page()

    # First Page Content
    pdf.chapter_title(f"Report for {exam_name}")
    pdf.set_font("Arial", "", 12)
    pdf.cell(0, 10, f"Student Name: {student_name}", 0, 1)
    pdf.cell(0, 10, f"Teacher Name: {teacher_name}", 0, 1)
    pdf.cell(0, 10, f"Parent Contact: {parent_contact}", 0, 1)
    pdf.cell(0, 10, f"Teacher Contact: {teacher_contact}", 0, 1)
    pdf.cell(0, 10, f"Class: {class_name}", 0, 1)
    pdf.cell(0, 10, "", 0, 1)  # Blank line
    pdf.cell(0, 10, f"Exam Name: {exam_name}", 0, 1)
    pdf.ln(10)

    # Second Page: Marksheet
    pdf.add_page()
    pdf.chapter_title("Marksheet")

    # Table Header
    pdf.set_font("Arial", "B", 12)
    pdf.cell(50, 10, "Subject", 1)
    pdf.cell(30, 10, "Student Score", 1)
    pdf.cell(30, 10, "Top Score", 1)
    pdf.cell(30, 10, "Avg Score", 1)
    pdf.cell(30, 10, "Grade", 1)
    pdf.ln()

    # Table Rows
    pdf.set_font("Arial", "", 12)
    subjects = ["Math", "Science", "English", "History", "Geography"]
    total_score = 0

    for i, subject in enumerate(subjects):
        student_score = scores[i]
        total_score += student_score
        grade = get_grade(student_score)

        pdf.cell(50, 10, subject, 1)
        pdf.cell(30, 10, str(student_score), 1)
        pdf.cell(30, 10, str(top_scores[i]), 1)
        pdf.cell(30, 10, str(average_scores[i]), 1)
        pdf.cell(30, 10, grade, 1)
        pdf.ln()

    # Total and Average
    average_student_score = total_score / len(subjects)
    pdf.cell(50, 10, "Total Score", 1)
    pdf.cell(30, 10, str(total_score), 1, 0)
    pdf.cell(30, 10, "", 1)
    pdf.cell(30, 10, "", 1)
    pdf.cell(30, 10, "", 1)
    pdf.ln()

    pdf.cell(50, 10, "Average Score", 1)
    pdf.cell(30, 10, str(average_student_score), 1, 0)
    pdf.cell(30, 10, "", 1)
    pdf.cell(30, 10, "", 1)
    pdf.cell(30, 10, "", 1)

    # Embed Bar Graph
    pdf.add_page()
    pdf.chapter_title("Performance Comparison")
    pdf.image("bar_graph.png", x=10, y=50, w=180)  # Embed the saved bar graph image

    # Save the PDF in the 'Grades' directory with the student's name in the filename
    file_name = f"{student_name.replace(' ', '_')}_report_card.pdf"
    pdf_path = os.path.join(directory, file_name)
    pdf.output(pdf_path)
    print(f"Report card generated successfully as '{pdf_path}'.")

# Example usage
subjects = ["Math", "Science", "English", "History", "Geography"]
scores = [85, 90, 78, 88, 92]  # Student scores
top_scores = [95, 97, 85, 94, 96]  # Top scores
average_scores = [80, 85, 75, 82, 84]  # Class average scores

# Generate the bar graph
create_bar_graph(subjects, scores, top_scores, average_scores)

# Generate the report card with the bar graph
generate_report_card(
    student_name="John Doe",
    teacher_name="Mrs. Smith",
    parent_contact="123-456-7890",
    teacher_contact="098-765-4321",
    class_name="10th Grade",
    exam_name="Midterm Exam",
    scores=scores,
    top_scores=top_scores,
    average_scores=average_scores
)
